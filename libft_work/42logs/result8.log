ft_memset:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_bzero:      [OK] [OK] [OK] [OK] 
ft_memcpy:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [CRASH] 
[crash]: your memcpy does not behave well with NULL as both params with size
Test code:
	ft_memcpy(((void *)0), ((void *)0), 3);


ft_memccpy:    [FAILED] [FAILED] [FAILED] [FAILED] [OK] [OK] [FAILED] [NO CRASH] [OK] [OK] [OK] [NO CRASH] 
[fail]: your memccpy doesn't work with basic params
Test code:
	char src[] = "test basic du memccpy !";
	char buff1[22];
	char buff2[22];

	__builtin___memccpy_chk (buff1, src, 'm', 6, __builtin_object_size (buff1, 0));
	ft_memccpy(buff2, src, 'm', 6);
	if (!memcmp(buff1, buff2, 6))
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);

Diffs:
     memccpy: |test bä|
  ft_memccpy: |@}\ÿ|

[fail]: your memccpy doesn't cast the memory into unsigned char
Test code:
	char buff1[] = "abcdefghijklmnopqrstuvwxyz";
	char buff2[] = "abcdefghijklmnopqrstuvwxyz";
	char *src = "string with\200inside !";

	__builtin___memccpy_chk (buff1, src, '\200', 21, __builtin_object_size (buff1, 0));
	ft_memccpy(buff2, src, '\200', 21);
	if (!memcmp(buff1, buff2, 21))
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);

Diffs:
     memccpy: |string with€mnopqrstuvwxyz|
  ft_memccpy: |abcdefghijklmnopqrstuvwxyz|

[fail]: your memccpy doesn't cast the stop-character into unsigned char
Test code:
	char buff1[] = "abcdefghijklmnopqrstuvwxyz";
	char buff2[] = "abcdefghijklmnopqrstuvwxyz";
	char *src = "string with\200inside !";

	__builtin___memccpy_chk (buff1, src, 0600, 21, __builtin_object_size (buff1, 0));
	ft_memccpy(buff2, src, 0600, 21);
	if (!memcmp(buff1, buff2, 21))
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);

Diffs:
     memccpy: |string with€mnopqrstuvwxyz|
  ft_memccpy: |abcdefghijklmnopqrstuvwxyz|

[fail]: your memccpy's return is false/doesn't work with basic params
Test code:
	char src[] = "test basic du memccpy !";
	char buff1[22];

	__builtin___memset_chk (buff1, 0, sizeof(buff1), __builtin_object_size (buff1, 0));
	char *r1 = __builtin___memccpy_chk (buff1, src, 'm', 22, __builtin_object_size (buff1, 0));
	char *r2 = ft_memccpy(buff1, src, 'm', 22);
	if (r1 != r2)
		exit(TEST_FAILED);
	r1 = __builtin___memccpy_chk ("", src, 'm', 0, __builtin_object_size ("", 0));
	r2 = ft_memccpy("", src, 'm', 0);
	if (r1 != r2)
		exit(TEST_FAILED);
	exit(TEST_SUCCESS);

Diffs:
     memccpy: ||
  ft_memccpy: |(null)|

[fail]: your memccpy does not work with basic params
Test code:
	char src[] = "test basic !";
	char buff1[] = "the cake is a lie !\0I'm hidden lol\r\n";
	char buff2[] = "the cake is a lie !\0I'm hidden lol\r\n";

	__builtin___memccpy_chk (buff1, src, ' ', strlen(src), __builtin_object_size (buff1, 0));
	ft_memccpy(buff2, src, ' ', strlen(src));
	if (!memcmp(buff1, buff2, strlen(buff2)))
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);

Diffs:
     memccpy: |test ake is a lie !|
  ft_memccpy: |the cake is a lie !|

[no crash]: your memccpy does not segfault dst is not big enough
Test code:
	ft_memccpy("", "segfaulter tu dois", '\0', 17);


[no crash]: your memccpy does not segv with NULL on second params
Test code:
	ft_memccpy("            ", ((void *)0), ' ', 17);


ft_memmove:    [MISSING]
ft_memchr:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_memcmp:     [OK] [FAILED] [OK] [OK] [FAILED] [FAILED] [FAILED] [CRASH] [OK] [OK] 
[fail]: your memcmp does not work with basic input
Test code:
	char *s1 = "\xff\xaa\xde\x12WXYZ";
	char *s2 = "\xff\xaa\xde\x12MACOSX";
	size_t size = 7;
	int i1 = ((simple_memcmp(s1, s2, size) > 0) ? 1 : ((simple_memcmp(s1, s2, size) < 0) ? -1 : 0));
	int i2 = ((ft_memcmp(s1, s2, size) > 0) ? 1 : ((ft_memcmp(s1, s2, size) < 0) ? -1 : 0));

	if (i1 == i2)
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);

Diffs:
      memcmp: |1|
   ft_memcmp: |0|

[fail]: your memcmp does not cast the memory in unsigned char
Test code:
	char *s1 = "\xff\xaa\xde\200";
	char *s2 = "\xff\xaa\xde\0";
	size_t size = 8;
	int i1 = simple_memcmp(s1, s2, size);
	int i2 = ft_memcmp(s1, s2, size);

	if (i1 == i2)
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);

Diffs:
      memcmp: |128|
   ft_memcmp: |0|

[fail]: your memcmp stop at \0
Test code:
	char *s1 = "atoms\0\0\0\0";
	char *s2 = "atoms\0abc";
	size_t size = 8;
	int i1 = simple_memcmp(s1, s2, size);
	int i2 = ft_memcmp(s1, s2, size);

	if (i1 == i2)
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);

Diffs:
      memcmp: |-97|
   ft_memcmp: |0|

[fail]: your memcmp does not work with basic input
Test code:
	char *s1 = "\xff\0\0\xaa\0\xde\xffMACOSX\xff";
	char *s2 = "\xff\0\0\xaa\0\xde\x00MBS";
	size_t size = 9;
	int i1 = simple_memcmp(s1, s2, size);
	int i2 = ft_memcmp(s1, s2, size);

	if (i1 == i2)
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);

Diffs:
      memcmp: |255|
   ft_memcmp: |0|

[crash]: your memcmp crash because it read too many bytes !
Test code:
	size_t size = 10;
	char *b1 = electric_alloc(size);
	char *b2 = electric_alloc(size);

	__builtin___strcpy_chk (b1, ".........", __builtin_object_size (b1, 2 > 1 ? 1 : 0));
	__builtin___strcpy_chk (b2, ".........", __builtin_object_size (b2, 2 > 1 ? 1 : 0));
	ft_memcmp(b1, b2, size);
	exit(TEST_SUCCESS);


ft_strlen:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strdup:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strcpy:     [OK] [FAILED] [OK] [FAILED] [OK] [OK] [CRASH] [OK] [OK] 
[fail]: your strcpy return value is false / your strcpy does not work
Test code:
	char *src = "--> nyancat <--\n\r";
	char dst1[30];

	__builtin___memset_chk (dst1, 'a', sizeof(dst1), __builtin_object_size (dst1, 0));
	char *r1 = __builtin___strcpy_chk (dst1, src, __builtin_object_size (dst1, 2 > 1 ? 1 : 0));
	char *r2 = ft_strcpy(dst1, src);
	if (r1 != r2)
		exit(TEST_FAILED);
	char b[1];
	r1 = __builtin___strcpy_chk (b, "", __builtin_object_size (b, 2 > 1 ? 1 : 0));
	r2 = ft_strcpy(b, "");
	if (r1 != r2)
		exit(TEST_FAILED);
	exit(TEST_SUCCESS);

Diffs:
      strcpy: |--> nyancat <--
|
   ft_strcpy: |yaaaaaaaaaaa|

[fail]: your strcpy overflow the dst !
Test code:
	char *src = "AAAA";
	char dst1[80];
	char dst2[80];

	__builtin___memset_chk (dst1, 'B', sizeof(dst1), __builtin_object_size (dst1, 0));
	__builtin___memset_chk (dst2, 'B', sizeof(dst2), __builtin_object_size (dst2, 0));
	__builtin___strcpy_chk (dst1, src, __builtin_object_size (dst1, 2 > 1 ? 1 : 0));
	ft_strcpy(dst2, src);
	if (memcmp(dst1, dst2, 20))
	{
		for (register int __i = 0; __i < 20; ++__i)
		for (register int __i = 0; __i < 20; ++__i)
		exit(TEST_FAILED);
	}
	exit(TEST_SUCCESS);

Diffs:
      strcpy: |\x41 \x41 \x41 \x41 \x0  \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 |
   ft_strcpy: |\x41 \x41 \x41 \x41 \x0  \x79 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 |

[crash]: your strcpy crash because it read too many bytes or attempt to read on dst !
Test code:
	const size_t size = 10;
	char *src = "AAAAAAAAB";
	char *dst = electric_alloc(size);

	ft_strcpy(dst, src);
	exit(TEST_SUCCESS);


ft_strncpy:    [MISSING]
ft_strcat:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strncat:    [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strlcat:    [OK] [FAILED] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [FAILED] [OK] [OK] 
[fail]: your strlcat does not work with basic input
Test code:
	char *str = "the cake is a lie !\0I'm hidden lol\r\n";
	char buff1[0xF00] = "there is no stars in the sky";
	char buff2[0xF00] = "there is no stars in the sky";
	size_t max = strlen("the cake is a lie !\0I'm hidden lol\r\n") + 4;
	size_t r1 = __builtin___strlcat_chk (buff1, str, max, __builtin_object_size (buff1, 2 > 1 ? 1 : 0));
	size_t r2 = ft_strlcat(buff2, str, max);

	if (r1 != r2)
		exit(TEST_FAILED);
	char s1[4] = "";
	char s2[4] = "";
	r1 = __builtin___strlcat_chk (s1, "thx to ntoniolo for this test !", 4, __builtin_object_size (s1, 2 > 1 ? 1 : 0))
		;
	r2 = ft_strlcat(s2, "thx to ntoniolo for this test !", 4)
		;
	if (r1 != r2)
		exit(TEST_FAILED);
	exit(TEST_SUCCESS);

Diffs:
     strlcat: |42|
  ft_strlcat: |0|

[fail]: your strlcat return value is false
Test code:
	char *src = "aaa";
	char dst1[20];
	char dst2[20];
	int ret1;
	int ret2;

	__builtin___memset_chk (dst1, 'B', sizeof(dst1), __builtin_object_size (dst1, 0));
	__builtin___memset_chk (dst2, 'B', sizeof(dst2), __builtin_object_size (dst2, 0));
	__builtin___strlcat_chk (dst1, src, 20, __builtin_object_size (dst1, 2 > 1 ? 1 : 0));
	__builtin___strlcat_chk (dst1, src, 20, __builtin_object_size (dst1, 2 > 1 ? 1 : 0));
	ret1 = __builtin___strlcat_chk (dst1, src, 20, __builtin_object_size (dst1, 2 > 1 ? 1 : 0));
	ft_strlcat(dst2, src, 20);
	ft_strlcat(dst2, src, 20);
	ret2 = ft_strlcat(dst2, src, 20);
	if (ret1 == ret2)
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);

Diffs:
     strlcat: |23|
  ft_strlcat: |0|

}

