ft_strncpy:    [OK] [FAILED] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
[fail]: your strncpy return value is false / your strncpy does not works
Test code:
	char *src = "--> nyancat <--\n\r";
	char dst1[30];
	size_t max = 12;

	__builtin___memset_chk (dst1, 'B', sizeof(dst1), __builtin_object_size (dst1, 0));
	char *r1 = __builtin___strncpy_chk (dst1, src, max, __builtin_object_size (dst1, 2 > 1 ? 1 : 0));
	char *r2 = ft_strncpy(dst1, src, max);
	if (r1 != r2)
		exit(TEST_FAILED);
	exit(TEST_SUCCESS);

Diffs:
     strncpy: |--> nyancat BBBBBBBBBBBBBBBBBB|
  ft_strncpy: |BBBBBBBBBBBBBBBBBB|




2\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ 
ft_strcpy:     [OK] [FAILED] [OK] [FAILED] [OK] [OK] [CRASH] [OK] [OK] 
[fail]: your strcpy return value is false / your strcpy does not work
Test code:
	char *src = "--> nyancat <--\n\r";
	char dst1[30];

	__builtin___memset_chk (dst1, 'a', sizeof(dst1), __builtin_object_size (dst1, 0));
	char *r1 = __builtin___strcpy_chk (dst1, src, __builtin_object_size (dst1, 2 > 1 ? 1 : 0));
	char *r2 = ft_strcpy(dst1, src);
	if (r1 != r2)
		exit(TEST_FAILED);
	char b[1];
	r1 = __builtin___strcpy_chk (b, "", __builtin_object_size (b, 2 > 1 ? 1 : 0));
	r2 = ft_strcpy(b, "");
	if (r1 != r2)
		exit(TEST_FAILED);
	exit(TEST_SUCCESS);

Diffs:
      strcpy: |--> nyancat <--
|
   ft_strcpy: |yaaaaaaaaaaa|

[fail]: your strcpy overflow the dst !
Test code:
	char *src = "AAAA";
	char dst1[80];
	char dst2[80];

	__builtin___memset_chk (dst1, 'B', sizeof(dst1), __builtin_object_size (dst1, 0));
	__builtin___memset_chk (dst2, 'B', sizeof(dst2), __builtin_object_size (dst2, 0));
	__builtin___strcpy_chk (dst1, src, __builtin_object_size (dst1, 2 > 1 ? 1 : 0));
	ft_strcpy(dst2, src);
	if (memcmp(dst1, dst2, 20))
	{
		for (register int __i = 0; __i < 20; ++__i)
		for (register int __i = 0; __i < 20; ++__i)
		exit(TEST_FAILED);
	}
	exit(TEST_SUCCESS);

Diffs:
      strcpy: |\x41 \x41 \x41 \x41 \x0  \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 |
   ft_strcpy: |\x41 \x41 \x41 \x41 \x0  \x79 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 \x42 |

[crash]: your strcpy crash because it read too many bytes or attempt to read on dst !
Test code:
	const size_t size = 10;
	char *src = "AAAAAAAAB";
	char *dst = electric_alloc(size);

	ft_strcpy(dst, src);
	exit(TEST_SUCCESS);








3\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ 
ft_itoa:       [OK] [OK] [OK] [FAILED] [OK] [OK] [OK] [OK] [OK] 
	char *i1 = ft_itoa((-2147483647 -1));

	fd_to_buffer(2);
	free(i1);
	write(2, "", 1);
	get_fd_buffer(2, ((void *)0), 0);
	exit(TEST_SUCCESS);









4\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ 
ft_putchar:    [OK] [OK] [KO] 
[KO]: your putchar does not work with unicode
Test code:
	char buff[10];
	char buff2[10];
	int c = L'Ã¸';
	int len = 0;

	putwchart(c, &len, buff2);
	buff2[len] = 0;
	fd_to_buffer(1);
	ft_putchar(c);
	write(1, "", 1);
	get_fd_buffer(1, buff, 10);
	if (!strcmp(buff, buff2))
		exit(TEST_SUCCESS);
	exit(TEST_KO);

Diffs:
     putchar: |ø|
  ft_putchar: |Ã¸|


ft_putchar_fd: [OK] [OK] [KO] 
[KO]: your putchar_fd does not work with unicode
Test code:
	char buff[10];
	char buff2[10];
	int c = L'Ã¸';
	int len = 0;

	putwchart(c, &len, buff2);
	buff2[len] = 0;
	fd_to_buffer(2);
	ft_putchar_fd(c, 2);
	write(2, "", 1);
	get_fd_buffer(2, buff, 10);
	if (!strcmp(buff, buff2))
		exit(TEST_SUCCESS);
	exit(TEST_KO);

Diffs:
  putchar_fd: |ø|
ft_putchar_fd: |Ã¸|
